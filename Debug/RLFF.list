
RLFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000814  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009ac  080009ac  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009ac  080009ac  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  080009ac  080009ac  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009ac  080009ac  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009ac  080009ac  000019ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009b0  080009b0  000019b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080009b4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000010  080009c4  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080009c4  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023ed  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e8  00000000  00000000  0000442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000378  00000000  00000000  00004e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000027b  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ff8  00000000  00000000  0000540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003746  00000000  00000000  00019403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f064  00000000  00000000  0001cb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bbad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  0009bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000994 	.word	0x08000994

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08000994 	.word	0x08000994

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
int main(void)
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fa5a 	bl	800069c <HAL_Init>

  /* USER CODE BEGIN Init */
USART1_init();
 80001e8:	f000 f9b8 	bl	800055c <USART1_init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
gpio_init();
 80001ec:	f000 f842 	bl	8000274 <gpio_init>
tick = HAL_GetTick();
 80001f0:	f000 faba 	bl	8000768 <HAL_GetTick>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000268 <main+0x90>)
 80001f8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if ((HAL_GetTick()-tick) >= delay){
 80001fa:	f000 fab5 	bl	8000768 <HAL_GetTick>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b19      	ldr	r3, [pc, #100]	@ (8000268 <main+0x90>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	1ad2      	subs	r2, r2, r3
 8000206:	4b19      	ldr	r3, [pc, #100]	@ (800026c <main+0x94>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d30a      	bcc.n	8000224 <main+0x4c>
	  GPIOC->ODR ^= (0X01 << 13);  // Toggle PC13
 800020e:	4b18      	ldr	r3, [pc, #96]	@ (8000270 <main+0x98>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a17      	ldr	r2, [pc, #92]	@ (8000270 <main+0x98>)
 8000214:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000218:	6153      	str	r3, [r2, #20]

	  tick = HAL_GetTick();}
 800021a:	f000 faa5 	bl	8000768 <HAL_GetTick>
 800021e:	4603      	mov	r3, r0
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <main+0x90>)
 8000222:	6013      	str	r3, [r2, #0]
	  char C = USART1_read();
 8000224:	f000 f986 	bl	8000534 <USART1_read>
 8000228:	4603      	mov	r3, r0
 800022a:	71fb      	strb	r3, [r7, #7]
	  if (C == 'U'){
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b55      	cmp	r3, #85	@ 0x55
 8000230:	d102      	bne.n	8000238 <main+0x60>
		  motor_forward();
 8000232:	f000 f8a5 	bl	8000380 <motor_forward>
 8000236:	e7e0      	b.n	80001fa <main+0x22>
	  }
	  else if (C == 'D') {
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b44      	cmp	r3, #68	@ 0x44
 800023c:	d102      	bne.n	8000244 <main+0x6c>
	          motor_backward();
 800023e:	f000 f8d1 	bl	80003e4 <motor_backward>
 8000242:	e7da      	b.n	80001fa <main+0x22>
	      }
	  else if (C == 'L') {
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	2b4c      	cmp	r3, #76	@ 0x4c
 8000248:	d102      	bne.n	8000250 <main+0x78>
		  motor_left();
 800024a:	f000 f8e3 	bl	8000414 <motor_left>
 800024e:	e7d4      	b.n	80001fa <main+0x22>
	  }
	  else if (C == 'R') {
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2b52      	cmp	r3, #82	@ 0x52
 8000254:	d102      	bne.n	800025c <main+0x84>
		  motor_right();
 8000256:	f000 f8f5 	bl	8000444 <motor_right>
 800025a:	e7ce      	b.n	80001fa <main+0x22>
	  }
	  else if (C == 'S'){
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b53      	cmp	r3, #83	@ 0x53
 8000260:	d1cb      	bne.n	80001fa <main+0x22>
	  		  motor_stop();
 8000262:	f000 f8a5 	bl	80003b0 <motor_stop>
  {
 8000266:	e7c8      	b.n	80001fa <main+0x22>
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000000 	.word	0x20000000
 8000270:	40020800 	.word	0x40020800

08000274 <gpio_init>:



/* USER CODE BEGIN 4 */
void gpio_init()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000278:	4b3e      	ldr	r3, [pc, #248]	@ (8000374 <gpio_init+0x100>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a3d      	ldr	r2, [pc, #244]	@ (8000374 <gpio_init+0x100>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000284:	4b3b      	ldr	r3, [pc, #236]	@ (8000374 <gpio_init+0x100>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <gpio_init+0x100>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
// enabling the PC13 to toggle to signal that the while loop is alive
	GPIOC -> MODER &= ~(0b11 << 26);
 8000290:	4b39      	ldr	r3, [pc, #228]	@ (8000378 <gpio_init+0x104>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a38      	ldr	r2, [pc, #224]	@ (8000378 <gpio_init+0x104>)
 8000296:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800029a:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER |= 0x01 << 26;
 800029c:	4b36      	ldr	r3, [pc, #216]	@ (8000378 <gpio_init+0x104>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a35      	ldr	r2, [pc, #212]	@ (8000378 <gpio_init+0x104>)
 80002a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002a6:	6013      	str	r3, [r2, #0]

// Configuring the motor direction pins
// CLEAR and set PA1 PA2 PA3 and PA4 pins to output
	// IN1 -> PA1
	GPIOA->MODER &= ~(3U << (1 * 2));
 80002a8:	4b34      	ldr	r3, [pc, #208]	@ (800037c <gpio_init+0x108>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	@ (800037c <gpio_init+0x108>)
 80002ae:	f023 030c 	bic.w	r3, r3, #12
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << (1 * 2));
 80002b4:	4b31      	ldr	r3, [pc, #196]	@ (800037c <gpio_init+0x108>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	@ (800037c <gpio_init+0x108>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x3U << (1 * 2));
 80002c0:	4b2e      	ldr	r3, [pc, #184]	@ (800037c <gpio_init+0x108>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	@ (800037c <gpio_init+0x108>)
 80002c6:	f023 030c 	bic.w	r3, r3, #12
 80002ca:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(1U << 1);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	@ (800037c <gpio_init+0x108>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	@ (800037c <gpio_init+0x108>)
 80002d2:	f023 0302 	bic.w	r3, r3, #2
 80002d6:	6053      	str	r3, [r2, #4]
	// IN2 -> PA2
	GPIOA->MODER &= ~(3U << (2 * 2));
 80002d8:	4b28      	ldr	r3, [pc, #160]	@ (800037c <gpio_init+0x108>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a27      	ldr	r2, [pc, #156]	@ (800037c <gpio_init+0x108>)
 80002de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << (2 * 2));
 80002e4:	4b25      	ldr	r3, [pc, #148]	@ (800037c <gpio_init+0x108>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a24      	ldr	r2, [pc, #144]	@ (800037c <gpio_init+0x108>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x3U << (2 * 2));
 80002f0:	4b22      	ldr	r3, [pc, #136]	@ (800037c <gpio_init+0x108>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a21      	ldr	r2, [pc, #132]	@ (800037c <gpio_init+0x108>)
 80002f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002fa:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(1U << 2);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <gpio_init+0x108>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a1e      	ldr	r2, [pc, #120]	@ (800037c <gpio_init+0x108>)
 8000302:	f023 0304 	bic.w	r3, r3, #4
 8000306:	6053      	str	r3, [r2, #4]
	// IN3 -> PA3
	GPIOA->MODER &= ~(3U << (3 * 2));
 8000308:	4b1c      	ldr	r3, [pc, #112]	@ (800037c <gpio_init+0x108>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <gpio_init+0x108>)
 800030e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << (3 * 2));
 8000314:	4b19      	ldr	r3, [pc, #100]	@ (800037c <gpio_init+0x108>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a18      	ldr	r2, [pc, #96]	@ (800037c <gpio_init+0x108>)
 800031a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x3U << (3 * 2));
 8000320:	4b16      	ldr	r3, [pc, #88]	@ (800037c <gpio_init+0x108>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a15      	ldr	r2, [pc, #84]	@ (800037c <gpio_init+0x108>)
 8000326:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800032a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(1U << 3);
 800032c:	4b13      	ldr	r3, [pc, #76]	@ (800037c <gpio_init+0x108>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <gpio_init+0x108>)
 8000332:	f023 0308 	bic.w	r3, r3, #8
 8000336:	6053      	str	r3, [r2, #4]
	// IN4 -> PA4
	GPIOA->MODER &= ~(3U << (4 * 2));
 8000338:	4b10      	ldr	r3, [pc, #64]	@ (800037c <gpio_init+0x108>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0f      	ldr	r2, [pc, #60]	@ (800037c <gpio_init+0x108>)
 800033e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000342:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << (4 * 2));
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <gpio_init+0x108>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0c      	ldr	r2, [pc, #48]	@ (800037c <gpio_init+0x108>)
 800034a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800034e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x3U << (4 * 2));
 8000350:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <gpio_init+0x108>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a09      	ldr	r2, [pc, #36]	@ (800037c <gpio_init+0x108>)
 8000356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800035a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(1U << 4);
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <gpio_init+0x108>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a06      	ldr	r2, [pc, #24]	@ (800037c <gpio_init+0x108>)
 8000362:	f023 0310 	bic.w	r3, r3, #16
 8000366:	6053      	str	r3, [r2, #4]
	}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020800 	.word	0x40020800
 800037c:	40020000 	.word	0x40020000

08000380 <motor_forward>:

void motor_forward(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    // IN1 = HIGH (PA1)
    GPIOA->BSRR = (1U << 1);
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <motor_forward+0x2c>)
 8000386:	2202      	movs	r2, #2
 8000388:	619a      	str	r2, [r3, #24]
    // IN2 = LOW (PA2)
    GPIOA->BSRR = (1U << (2 + 16));
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <motor_forward+0x2c>)
 800038c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000390:	619a      	str	r2, [r3, #24]
    // IN3 = HIGH (PA3)
    GPIOA->BSRR = (1U << 3);
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <motor_forward+0x2c>)
 8000394:	2208      	movs	r2, #8
 8000396:	619a      	str	r2, [r3, #24]
    // IN4 = LOW (PA4)
    GPIOA->BSRR = (1U << (4 + 16));
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <motor_forward+0x2c>)
 800039a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800039e:	619a      	str	r2, [r3, #24]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000

080003b0 <motor_stop>:

void motor_stop(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
    // IN1 = LOW (PA1)
    GPIOA->BSRR = (1U << (1 + 16));
 80003b4:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <motor_stop+0x30>)
 80003b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80003ba:	619a      	str	r2, [r3, #24]
    // IN2 = LOW (PA2)
    GPIOA->BSRR = (1U << (2 + 16));
 80003bc:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <motor_stop+0x30>)
 80003be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c2:	619a      	str	r2, [r3, #24]
    // IN3 = LOW (PA3)
    GPIOA->BSRR = (1U << (3 + 16));
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <motor_stop+0x30>)
 80003c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80003ca:	619a      	str	r2, [r3, #24]
    // IN4 = LOW (PA4)
    GPIOA->BSRR = (1U << (4 + 16));
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <motor_stop+0x30>)
 80003ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003d2:	619a      	str	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40020000 	.word	0x40020000

080003e4 <motor_backward>:
void motor_backward(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
    // Left motor backward: IN1 = LOW, IN2 = HIGH
    GPIOA->BSRR = (1U << (1 + 16));
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <motor_backward+0x2c>)
 80003ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80003ee:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << 2);
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <motor_backward+0x2c>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]

    // Right motor backward: IN3 = LOW, IN4 = HIGH
    GPIOA->BSRR = (1U << (3 + 16));
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <motor_backward+0x2c>)
 80003f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80003fc:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << 4);
 80003fe:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <motor_backward+0x2c>)
 8000400:	2210      	movs	r2, #16
 8000402:	619a      	str	r2, [r3, #24]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40020000 	.word	0x40020000

08000414 <motor_left>:

void motor_left(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
    // Left motor stop: IN1 = LOW, IN2 = LOW
    GPIOA->BSRR = (1U << (1 + 16));
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <motor_left+0x2c>)
 800041a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800041e:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << (2 + 16));
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <motor_left+0x2c>)
 8000422:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000426:	619a      	str	r2, [r3, #24]

    // Right motor forward: IN3 = HIGH, IN4 = LOW
    GPIOA->BSRR = (1U << 3);
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <motor_left+0x2c>)
 800042a:	2208      	movs	r2, #8
 800042c:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << (4 + 16));
 800042e:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <motor_left+0x2c>)
 8000430:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000434:	619a      	str	r2, [r3, #24]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40020000 	.word	0x40020000

08000444 <motor_right>:
void motor_right(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    // Left motor forward: IN1 = HIGH, IN2 = LOW
    GPIOA->BSRR = (1U << 1);
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <motor_right+0x2c>)
 800044a:	2202      	movs	r2, #2
 800044c:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << (2 + 16));
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <motor_right+0x2c>)
 8000450:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000454:	619a      	str	r2, [r3, #24]

    // Right motor stop: IN3 = LOW, IN4 = LOW
    GPIOA->BSRR = (1U << (3 + 16));
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <motor_right+0x2c>)
 8000458:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800045c:	619a      	str	r2, [r3, #24]
    GPIOA->BSRR = (1U << (4 + 16));
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <motor_right+0x2c>)
 8000460:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000464:	619a      	str	r2, [r3, #24]
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40020000 	.word	0x40020000

08000474 <EN_USART1CLK>:

void EN_USART1CLK(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |= 0x1;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <EN_USART1CLK+0x28>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <EN_USART1CLK+0x28>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC ->APB2ENR |= 0X10;
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <EN_USART1CLK+0x28>)
 8000486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000488:	4a04      	ldr	r2, [pc, #16]	@ (800049c <EN_USART1CLK+0x28>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <USART1_ConfigPins>:

void USART1_ConfigPins(void){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	// Set MODER FOR PA9 AND PA10 to be alternative functions
	GPIOA -> MODER &= ~(0xF << (2*9));
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a13      	ldr	r2, [pc, #76]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004aa:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80004ae:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (0xA << (2*9));
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004b6:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80004ba:	6013      	str	r3, [r2, #0]
	// set theier values to be AF7
	// PA9
	GPIOA -> AFR[1] &= ~(0xF << (4*1));
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c0:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (0x7 << (4*1));
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004ce:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80004d2:	6253      	str	r3, [r2, #36]	@ 0x24

	// PA10
	GPIOA -> AFR[1] &= ~(0xF << (4*2));
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80004de:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (0x7 << (4*2));
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <USART1_ConfigPins+0x58>)
 80004e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80004ea:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40020000 	.word	0x40020000

080004fc <USART1_SetBaudRate>:
void USART1_SetBaudRate(void){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	// to calcualte (16MHz/ (16 * 9600) = 104. 166 = 0X683)
	USART1 -> BRR = 0x683;
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <USART1_SetBaudRate+0x18>)
 8000502:	f240 6283 	movw	r2, #1667	@ 0x683
 8000506:	609a      	str	r2, [r3, #8]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40011000 	.word	0x40011000

08000518 <USART1_ConfigSettings>:

void USART1_ConfigSettings(void){
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	// enable RX and TX and EU and oversampling 16
	USART1 -> CR1 = 0x200C;
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <USART1_ConfigSettings+0x18>)
 800051e:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000522:	60da      	str	r2, [r3, #12]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40011000 	.word	0x40011000

08000534 <USART1_read>:
void USART1_Send(int ch){
	while ( !(USART1 ->SR & 0x80) ){}
	USART1 -> DR = ch & 0xFF;
}

char USART1_read(void){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	while( !(USART1 ->SR & 0x20)){}
 8000538:	bf00      	nop
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <USART1_read+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0320 	and.w	r3, r3, #32
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <USART1_read+0x6>
	return USART1 -> DR;
 8000546:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <USART1_read+0x24>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	b2db      	uxtb	r3, r3
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40011000 	.word	0x40011000

0800055c <USART1_init>:

void USART1_init(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	EN_USART1CLK();
 8000560:	f7ff ff88 	bl	8000474 <EN_USART1CLK>
	USART1_ConfigPins();
 8000564:	f7ff ff9c 	bl	80004a0 <USART1_ConfigPins>
	USART1_SetBaudRate();
 8000568:	f7ff ffc8 	bl	80004fc <USART1_SetBaudRate>
	USART1_ConfigSettings();
 800056c:	f7ff ffd4 	bl	8000518 <USART1_ConfigSettings>

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <HAL_MspInit+0x4c>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000582:	4a0f      	ldr	r2, [pc, #60]	@ (80005c0 <HAL_MspInit+0x4c>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000588:	6453      	str	r3, [r2, #68]	@ 0x44
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <HAL_MspInit+0x4c>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800058e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_MspInit+0x4c>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_MspInit+0x4c>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_MspInit+0x4c>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f891 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <SystemInit+0x20>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <SystemInit+0x20>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800064c:	f7ff ffea 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f000 f969 	bl	800094c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067a:	f7ff fdad 	bl	80001d8 <main>
  bx  lr    
 800067e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800068c:	080009b4 	.word	0x080009b4
  ldr r2, =_sbss
 8000690:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000694:	20000034 	.word	0x20000034

08000698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <HAL_Init+0x40>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <HAL_Init+0x40>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <HAL_Init+0x40>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <HAL_Init+0x40>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <HAL_Init+0x40>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <HAL_Init+0x40>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f90d 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff ff50 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f917 	bl	8000932 <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f8ed 	bl	80008fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000004 	.word	0x20000004
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000030 	.word	0x20000030

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000030 	.word	0x20000030

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db0a      	blt.n	800080e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	490c      	ldr	r1, [pc, #48]	@ (8000830 <__NVIC_SetPriority+0x4c>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080c:	e00a      	b.n	8000824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4908      	ldr	r1, [pc, #32]	@ (8000834 <__NVIC_SetPriority+0x50>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	3b04      	subs	r3, #4
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	440b      	add	r3, r1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	@ 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f1c3 0307 	rsb	r3, r3, #7
 8000852:	2b04      	cmp	r3, #4
 8000854:	bf28      	it	cs
 8000856:	2304      	movcs	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	2b06      	cmp	r3, #6
 8000860:	d902      	bls.n	8000868 <NVIC_EncodePriority+0x30>
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3b03      	subs	r3, #3
 8000866:	e000      	b.n	800086a <NVIC_EncodePriority+0x32>
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43da      	mvns	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	4313      	orrs	r3, r2
         );
}
 8000892:	4618      	mov	r0, r3
 8000894:	3724      	adds	r7, #36	@ 0x24
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff8e 	bl	80007e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff47 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff5c 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff8e 	bl	8000838 <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5d 	bl	80007e4 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffb0 	bl	80008a0 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <__libc_init_array>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4d0d      	ldr	r5, [pc, #52]	@ (8000984 <__libc_init_array+0x38>)
 8000950:	4c0d      	ldr	r4, [pc, #52]	@ (8000988 <__libc_init_array+0x3c>)
 8000952:	1b64      	subs	r4, r4, r5
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	2600      	movs	r6, #0
 8000958:	42a6      	cmp	r6, r4
 800095a:	d109      	bne.n	8000970 <__libc_init_array+0x24>
 800095c:	4d0b      	ldr	r5, [pc, #44]	@ (800098c <__libc_init_array+0x40>)
 800095e:	4c0c      	ldr	r4, [pc, #48]	@ (8000990 <__libc_init_array+0x44>)
 8000960:	f000 f818 	bl	8000994 <_init>
 8000964:	1b64      	subs	r4, r4, r5
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	2600      	movs	r6, #0
 800096a:	42a6      	cmp	r6, r4
 800096c:	d105      	bne.n	800097a <__libc_init_array+0x2e>
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f855 3b04 	ldr.w	r3, [r5], #4
 8000974:	4798      	blx	r3
 8000976:	3601      	adds	r6, #1
 8000978:	e7ee      	b.n	8000958 <__libc_init_array+0xc>
 800097a:	f855 3b04 	ldr.w	r3, [r5], #4
 800097e:	4798      	blx	r3
 8000980:	3601      	adds	r6, #1
 8000982:	e7f2      	b.n	800096a <__libc_init_array+0x1e>
 8000984:	080009ac 	.word	0x080009ac
 8000988:	080009ac 	.word	0x080009ac
 800098c:	080009ac 	.word	0x080009ac
 8000990:	080009b0 	.word	0x080009b0

08000994 <_init>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr

080009a0 <_fini>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	bf00      	nop
 80009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a6:	bc08      	pop	{r3}
 80009a8:	469e      	mov	lr, r3
 80009aa:	4770      	bx	lr
